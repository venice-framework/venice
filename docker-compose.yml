---
version: "3.2"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.1
    hostname: zookeeper
    container_name: zookeeper
    # ports 2181, 2888, and 3888 are exposed by default
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker-1:
    image: confluentinc/cp-kafka:5.4.1
    hostname: broker-1
    container_name: broker-1
    depends_on:
      - zookeeper
    # port 9092 is exposed by default
    environment:
      # parameters here:
      # https://kafka.apache.org/documentation/#configuration
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      # KAFKA_ADVERTISED_LISTENERS is a comma-separated list of listeners with their
      # host/IP and port. This is the metadata thatâ€™s passed back to clients.
      # https://www.confluent.io/blog/kafka-listeners-explained/
      # the use of PLAINTEXT is related to the security.inter.broker.protocol:
      # https://docs.confluent.io/current/installation/configuration/broker-configs.html
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  broker-2:
    image: confluentinc/cp-kafka:5.4.1
    hostname: broker-2
    container_name: broker-2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  broker-3:
    image: confluentinc/cp-kafka:5.4.1
    hostname: broker-3
    container_name: broker-3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-3:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  schema-registry:
    image: confluentinc/cp-schema-registry:5.4.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker-1
      - broker-2
      - broker-3
    # expose ports without publishing them to the host machine
    # port 8081 is exposed by default
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      # zookeeper election is deprecated, use kafka instead
      # https://docs.confluent.io/current/schema-registry/installation/config.html#kafkastore-bootstrap-servers
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker-1:9092,PLAINTEXT://broker-2:9092,PLAINTEXT://broker-3:9092
      # Comma-separated list of listeners that listen for API requests over
      # either HTTP or HTTPS. If a listener uses HTTPS, the appropriate SSL
      # configuration parameters need to be set as well.
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      DEBUG: "true"


  producer:
    build: ./producer
    container_name: producer
    depends_on:
      - broker-1
      - broker-2
      - broker-3
      - schema-registry
    environment:
      BROKER: "broker-1:9092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      TOPIC_NAME: "bus_locations"

  consumer:
    build: ./consumer
    container_name: consumer
    depends_on:
      - broker-1
      - broker-2
      - broker-3
      - schema-registry
    environment:
      BROKER: "broker-1:9092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      TOPIC_NAME: "bus_locations"

  ksql-server:
  ## In final version you might want to have a second ksqlserver running  https://github.com/confluentinc/ksql/blob/master/docker-compose.yml see that link for example
    image: confluentinc/cp-ksql-server:5.4.1
    hostname: ksql-server
    container_name: ksql-server
    depends_on:
      - broker-1
      - broker-2
      - broker-3
      - schema-registry
    # no ports are exposed by default
    expose:
      - "8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker-1:9092,broker-2:9092,broker-3:9092
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"

  #kafka-connect:
  #  image: confluentinc/cp-kafka-connect:5.4.1 
  #  hostname: kafka-connect
  #  container_name: kafka-connect
  #  depends_on:
  #    - broker
  #    - schema-registry
  #  ports:
  #    - "8083:8083"
  #  environment:
  #    # https://docs.confluent.io/current/connect/references/allconfigs.html
  #    CONNECT_BOOTSTRAP_SERVERS: "broker:9092"
  #    CONNECT_REST_PORT: 8083
  #    CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
  #    CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
  #    CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
  #    CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #    CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #    CONNECT_GROUP_ID: 1
  #    CONNECT_CONFIG_STORAGE_TOPIC: "connect-1-config"
  #    CONNECT_OFFSET_STORAGE_TOPIC: "connect-1-offsets"
  #    CONNECT_STATUS_STORAGE_TOPIC: "connect-1-status"
  #    # replication should always be at least 3 for a production system
  #    CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #    CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #    CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #    #CONNECT_LOG4J_ROOT_LOGLEVEL: "debug" 


  # ksqldb command line client
  # There are two options here:
  # 
  # (1)
  # Give the ksqldb-server a few minutes to set itself up.
  # Then, you can run a container for the ksqlDB command line client
  # and connect to the server using the following command:
  # docker run --rm --name ksql-cli -it --network=venice-python_default confluentinc/cp-ksql-cli:5.4.1 http://ksql-server:8088
  # 
  # This starts a container from the confluentinc/cp-ksql-cli image.
  # The entrypoint for that image is `ksql`. You can pass in the
  # address of the server as the argument when starting a container.
  # 
  # (2)
  # Uncomment out this service and run the following command whenever you want to enter the container.
  # docker-compose exec ksqldb-cli  ksql http://primary-ksqldb-server:8088
  # ksqldb-cli:
  #   image: confluentinc/ksqldb-cli:latest
  #   container_name: ksqldb-cli
  #   depends_on:
  #     - primary-ksqldb-server
  #   entrypoint: /bin/sh
  #   tty: true
  # 
  # I think (2) may be preferable for beginners, but it is a waste of resources since it keeps running
  # even if the user does not need to interact with the server.
  # I propose that in our framework, since we are writing a wrapper around docker commands, we can write a
  # wrapper around the command in (1) to bring up the command line (e.g., `venice ksql`) 

# licensing info for images: https://docs.confluent.io/current/installation/docker/image-reference.html