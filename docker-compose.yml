---
version: "3.2"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.1
    hostname: zookeeper
    container_name: zookeeper
    # ports 2181, 2888, and 3888 are exposed by default
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker-1:
    image: confluentinc/cp-server:5.4.1
    hostname: broker-1
    container_name: broker-1
    depends_on:
      - zookeeper
    # port 9092 is exposed by default
    environment:
      # parameters here:
      # https://kafka.apache.org/documentation/#configuration
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      # KAFKA_ADVERTISED_LISTENERS is a comma-separated list of listeners with their
      # host/IP and port. This is the metadata thatâ€™s passed back to clients.
      # https://www.confluent.io/blog/kafka-listeners-explained/
      # the use of PLAINTEXT is related to the security.inter.broker.protocol:
      # https://docs.confluent.io/current/installation/configuration/broker-configs.html
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  broker-2:
    image: confluentinc/cp-server:5.4.1
    hostname: broker-2
    container_name: broker-2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  broker-3:
    image: confluentinc/cp-server:5.4.1
    hostname: broker-3
    container_name: broker-3
    depends_on:
      - zookeeper
    expose:
      - "9094" # I tested in broker2 using ports and using expose here.
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-3:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  schema-registry:
    image: confluentinc/cp-schema-registry:5.4.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker-1
      - broker-2
      - broker-3
    # expose ports without publishing them to the host machine
    # port 8081 is exposed by default
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      # zookeeper election is deprecated, use kafka instead
      # https://docs.confluent.io/current/schema-registry/installation/config.html#kafkastore-bootstrap-servers
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker-1:9092,PLAINTEXT://broker-2:9092,PLAINTEXT://broker-3:9092
      # Comma-separated list of listeners that listen for API requests over
      # either HTTP or HTTPS. If a listener uses HTTPS, the appropriate SSL
      # configuration parameters need to be set as well.
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      DEBUG: "true"

  producer:
    build: ./producer
    container_name: producer
    depends_on:
      - broker-1
      - broker-2
      - broker-3
      - schema-registry
    environment:
      BROKER: "broker-1:9092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      TOPIC_NAME: "bus_locations"

  consumer:
    build: ./consumer
    container_name: consumer
    depends_on:
      - broker-1
      - broker-2
      - broker-3
      - schema-registry
    environment:
      BROKER: "broker-1:9092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      TOPIC_NAME: "bus_locations"

  primary-ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    hostname: primary-ksqldb-server
    container_name: primary-ksqldb-server
    depends_on:
      - broker-1
      - broker-2
      - broker-3
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker-1:9092,broker-2:9092,broker-3:9092
      KSQL_CONNECT_BOOTSTRAP_SERVERS: "broker-1:9092"

      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_CONNECT_URL: kafka-connect:8083
      KSQL_CONNECT_PLUGIN_PATH: "/usr/share/kafka/plugins"
      KSQL_KSQL_CONNECT_WORKER_CONFIG: "/connect/connect.properties"
      KSQL_CONNECT_GROUP_ID: "ksql-connect-cluster"
      KSQL_CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      KSQL_CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      KSQL_CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      KSQL_CONNECT_CONFIG_STORAGE_TOPIC: "ksql-connect-configs"
      KSQL_CONNECT_OFFSET_STORAGE_TOPIC: "ksql-connect-offsets"
      KSQL_CONNECT_STATUS_STORAGE_TOPIC: "ksql-connect-statuses"
      KSQL_CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      KSQL_CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      KSQL_CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  ## This is a mess now. I was digging into two problems:
  ## 1) why does SHOW CONNECTORS give an error - thats why tehre is so much ksql_connect stuff here now
  ## 2) why does the key show up in the topic, but you can't create a STREAM. I think..... it has something to do with ksql using strings. Thats teh next thing to test

  ## In final version you might want to have a second ksqlserver running  https://github.com/confluentinc/ksql/blob/master/docker-compose.yml see that link for example

  # Access the cli by running:
  # > docker-compose exec ksqldb-cli  ksql http://primary-ksqldb-server:8088
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    container_name: ksqldb-cli
    depends_on:
      - primary-ksqldb-server
    entrypoint: /bin/sh
    tty: true

  postgres:
    #  I got postgres to work, but couldn't get it to work with connect.
    #   # *-----------------------------*
    #   # To connect to the DB:
    #

    # docker exec -it venice-python_postgres_1 psql --username=venice_user --dbname=buses

    #   # *-----------------------------*

    image: postgres
    # ports:
    #   - 54320:5432 # Exposing different port to the host because I've got pg installed locally using port 5432. Currently commented out and just using default which is 5432
    environment:
      - POSTGRES_USER=venice_user
      - POSTGRES_PASSWORD=venice
      - POSTGRES_DB=buses
      # I think there is a way to move these to a database.env file, but I couldn't get it working and so lef it here.
    volumes:
      - ./data/postgres:/docker-entrypoint-initdb.d # TODO: Make this a named volume so it ill reload upon restart.

      # Currently this volume runs the SQL file in data/postgres on set up.
    restart: unless-stopped

  # Other systems
  mysql:
    # *-----------------------------*
    # To connect to the DB:
    #   docker exec -it mysql bash -c 'mysql -u root -p$MYSQL_ROOT_PASSWORD'
    # *-----------------------------*
    image: mysql:8.0
    container_name: mysql
    # ports:
    #   - 3306:3306
    # should be port 3306 that is exposed
    environment:
      - MYSQL_ROOT_PASSWORD=Admin123
      - MYSQL_USER=venice_user
      - MYSQL_PASSWORD=venice
    volumes:
      - ./data/mysql:/docker-entrypoint-initdb.d/ # this copies the data in data/mysql to the volume. Any sql scripts  in that folder will be run.

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: kafka-connect
    depends_on:
      - broker-1
      - broker-2
      - broker-3
      - schema-registry
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker-1:9092,broker-2:9092,broker-3:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _kafka-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _kafka-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _kafka-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components/,/connectors/" ## this is the filepath for installing new plugins. Its hardcoded below for some reason.

    volumes:
      - $PWD/connectors:/connectors
      - $PWD/data/flatfiles:/data
    # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
    command:
      - bash
      - -c
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:5.4.1
        confluent-hub install --no-prompt jcustenborder/kafka-connect-spooldir:2.0.43
        #
        echo "Downloading JDBC driver"
        cd /usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc
        #
        curl https://cdn.mysql.com/Downloads/Connector-J/mysql-connector-java-8.0.19.tar.gz | tar xz
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.1
    hostname: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      PLUGINS: appbaseio/dejavu
      OPTS: -Dindex.number_of_shards=1 -Dindex.number_of_replicas=0
            
  # connect:
  #   image: confluentinc/cp-kafka-connect:5.4.0
  #   hostname: kafka-connect
  #   container_name: kafka-connect
  #   depends_on: 
  #     - broker-1
  #     - broker-2
  #     - broker-3
  #     - schema-registry
  #   ports: 
  #     - 8083:8083
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: "broker-1:9092,broker-2:9092,broker-3:9092"
  #     CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect'
  #     CONNECT_REST_PORT: 8083
  #     CONNECT_GROUP_ID: kafka-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: kafka-connect-group-config
  #     CONNECT_OFFSET_STORAGE_TOPIC: kafka-connect-group-offsets
  #     CONNECT_STATUS_STORAGE_TOPIC: kafka-connect-group-status
  #     # converters are required parameters, including the schema-registry url
  #     # docs for using connect with schema registry https://docs.confluent.io/current/schema-registry/connect.html 
  #     CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     CONNECT_INTERNAL_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     CONNECT_INTERNAL_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     # CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
  #     # CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
  #     # CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'

# settings from Robin Moffat's monitoring sonos in grafana through kafka post
# https://github.com/confluentinc/demo-scene/blob/master/sonos/docker-compose.yml
# kafka-connect-01:
#   image: confluentinc/cp-kafka-connect:5.4.0
#   container_name: kafka-connect-01
#   depends_on:
#     - kafka-1
#     - kafka-2
#     - kafka-3
#     - schema-registry
#   ports:
#     - 8083:8083
#   environment:
#     CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
#     CONNECT_CUB_KAFKA_TIMEOUT: 300
#     CONNECT_BOOTSTRAP_SERVERS: "kafka-1:39092,kafka-2:49092,kafka-3:59092"
#     CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect-01'
#     CONNECT_REST_PORT: 8083
#     CONNECT_GROUP_ID: kafka-connect-group-01
#     CONNECT_CONFIG_STORAGE_TOPIC: _kafka-connect-group-01-configs
#     CONNECT_OFFSET_STORAGE_TOPIC: _kafka-connect-group-01-offsets
#     CONNECT_STATUS_STORAGE_TOPIC: _kafka-connect-group-01-status
#     CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
#     CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
#     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#     CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
#     CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
#     CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
#     CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
#     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
#     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
#     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
#     CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/,/data/connect-jars'
#     # External secrets config
#     # See https://docs.confluent.io/current/connect/security.html#externalizing-secrets
#     CONNECT_CONFIG_PROVIDERS: 'file'
#     CONNECT_CONFIG_PROVIDERS_FILE_CLASS: 'org.apache.kafka.common.config.provider.FileConfigProvider'
#   # volumes:
#   #   - ${PWD}/.env:/data/credentials.properties
#   command: 
#     # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
#     - bash 
#     - -c 
#     - |
#       echo "Installing connector plugins"
#       confluent-hub install --no-prompt confluentinc/kafka-connect-influxdb:1.1.2
#       #
#       echo "Launching Kafka Connect worker"
#       /etc/confluent/docker/run & 
#       #
#       echo "Waiting for Kafka Connect to start listening on $$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT "
#       while : ; do
#         curl_status=$$(curl -s -o /dev/null -w %{http_code} http://$$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT/connectors)
#         echo -e $$(date) " Kafka Connect listener HTTP state: " $$curl_status " (waiting for 200)"
#         if [ $$curl_status -eq 200 ] ; then
#           break
#         fi
#         sleep 5 
#       done
#       #
#       echo "Waiting for Schema Registry to start listening on schema-registry:8081 "
#       while [ $$(curl -s -o /dev/null -w %{http_code} http://schema-registry:8081) -eq 000 ] ; do 
#         echo -e $$(date) " Schema Registry listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://schema-registry:8081) " (waiting for != 000)"
#         sleep 5 
#       done
#       #      
#       sleep infinity


#  connect:
#    #image: confluentinc/cp-kafka-connect-base 
#    image: nantrinh/influxdb-connector
#    hostname: connect
#    container_name: connect
#    depends_on:
#      - broker
#      - schema-registry
#    ports:
#      - "8083:8083"
#    environment:
#      # https://docs.confluent.io/current/connect/references/allconfigs.html
#      CONNECT_BOOTSTRAP_SERVERS: "broker:9092"
#      CONNECT_REST_PORT: 8083
#      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
#      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
#      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
#      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#      CONNECT_GROUP_ID: 1
#      CONNECT_CONFIG_STORAGE_TOPIC: "connect-1-config"
#      CONNECT_OFFSET_STORAGE_TOPIC: "connect-1-offsets"
#      CONNECT_STATUS_STORAGE_TOPIC: "connect-1-status"
#      # replication should always be at least 3 for a production system
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
#      #CONNECT_LOG4J_ROOT_LOGLEVEL: "debug" 